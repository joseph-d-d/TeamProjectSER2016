public class Board {
	private Position[][] gameBoard = null;
	private int numberOfPellets = 0;
	
	public Board(){
		gameBoard = new Position[34][30];
		// 0 represents an empty position
		// 1 represents a wall
		// 2 represents a pellet
		// 3 represents a power pellet
		// 4 represents a pellet and an intersection
		int[][] boardArray = 
			{
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,1,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,1,2,2,2,2,2,2,1,0},
				{0,1,2,1,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,1,1,2,1,0},
				{0,1,3,1,0,0,1,2,1,2,1,0,1,2,1,1,2,1,0,1,2,1,2,1,0,0,1,3,1,0},
				{0,1,2,1,1,1,1,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,1,1,2,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,0},
				{0,1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,0},
				{0,1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1,0},
				{0,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1,0},
				{0,1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1,0},
				{0,1,3,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,3,1,0},
				{0,1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,0},
				{0,1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,0},
				{0,1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1,0},
				{0,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,0},
				{0,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0}
			};

		for (int i = 0; i < 34; i++)
		{
			for (int j = 0; j < 30; j++)
			{
				if(boardArray[i][j] == 0){
					gameBoard[i][j] = new Position(false, true, false, false);
				}
				// Draw wall positions for array values of 1
				if (boardArray[i][j] == 1)
				{
					gameBoard[i][j] = new Position(true, false, false, false);
				} // end if
				// Draw pellet positions for array values of 2
				if (boardArray[i][j] == 2)
				{
					gameBoard[i][j] = new Position(false, false, true, false);
					numberOfPellets++;
				}
				// Draw power pellets for array values of 3
				if (boardArray[i][j] == 3)
				{
					gameBoard[i][j] = new Position(false, false, true, true);
					numberOfPellets++;
				}
			} // end inner for loop
		} // end outer for loop
	}
	
	/**
	 * Gets the gameboard.
	 * @return 2D array of positions
	 */
	public Position[][] getGameboard(){
		return gameBoard;
	}
	
	/**
	 * Gets the number of pellets left on the board.
	 * @return numberOfPellets.
	 */
	public int getNumberOfPellets(){
		return numberOfPellets;
	}
	
	/**
	 * Removes 1 from to the total count of pellets.
	 */
	public void reducePelletCount(){
		numberOfPellets--;
	}

}